1 + 1
x <- 2
y <- 4
z <- x + y
print(z)
S <- "rain"
B <- "snow"
print S && B
print(S&&B)
my_age <- 22
my_name <- "Miranda"
minutes_in_day <- 1440
hours_in_year <- 8760
minute_rule <- function(minutes_in_day, hours_in_year) {
if (minutes_in_day > hours_in_year)
} else {}
} else {}
minute_rule <- funtion(minutes_in_day, hours_in_year) {
if (minutes_in_day > hours_in_year) {
print("True")
} else {
print("False")
}
}
}
minute_ruel
minute_rule
minutes_in_day > hours_in_year
minute_rule <- function(minutes_in_day, hours_in_year)
minutes_in_day > hours_in_year
minute_rule()
minutes_in_day > hours_in_year
View(minute_rule)
View(minute_rule)
mi
minute_rule <- funtion(minutes_in_day > hours_in_year)
minute_rule() {
if (minutes_in_day > hours_in_year) {
else {}
}
}
View(minute_rule)
View(minute_rule)
View(minute_rule)
View(minute_rule)
View(minute_rule)
View(minute_rule)
minute_rule <- funtion(minutes_in_day, hours_in_year) {
if (minutes_in_day > hours_in_year) {
status <- "True"
} else {
status <- "False"
}
return(status)
}
minute_rule()
minute_rule(1885,7879)
minute_rule(8796,2889)
minute_rule(minutes_in_day,hours_in_year)
seconds_in_year <- 31536000
seconds_in_lifetime <- 3155760000
second_in_universe <- 435200000000000000
print(seconds_in_lifetime)
getwd
getwd()
setwd()
minute_rule <- IsTRUE(minutes_in_day > hours_in_year)
if (minutes_in_day > hours_in_year) {
minute_rule = TRUE {
else {
minute_rule = FALSE
}
}
}
print(minute_rule)
getwd
getwd()
setwd(/Desktop/a2-core-programming-mirandasiyaoz)
setwd(Desktop/a2-core-programming-mirandasiyaoz)
setwd(a2-core-programming-mirandasiyaoz)
getwd()
setwd("/Users/miranda/a2-core-programming-mirandasiyaoz")
getwd()
setwd("/user/miranda/Desktop/a2-core-programming-mirandasiyaoz")
shiny::runApp('Desktop/a8-app-mirandasiyaoz/ShinyApp')
runApp('Desktop/a8-app-mirandasiyaoz/ShinyApp')
runApp('Desktop/a8-app-mirandasiyaoz/ShinyApp')
install.packages("shinyWidgets")
runApp('Desktop/a8-app-mirandasiyaoz/ShinyApp')
runApp('Desktop/a8-app-mirandasiyaoz/ShinyApp')
runApp('Desktop/a8-app-mirandasiyaoz/ShinyApp')
runApp('Desktop/a8-app-mirandasiyaoz/ShinyApp')
runApp('Desktop/a8-app-mirandasiyaoz/ShinyApp')
shinyApp(
ui = navbarPage("United",
theme = shinythemes::shinytheme("united"),  # <--- Specify theme here
tabPanel("Plot", "Plot tab contents..."),
navbarMenu("More",
tabPanel("Summary", "Summary tab contents..."),
tabPanel("Table", "Table tab contents...")
)
),
server = function(input, output) { }
)
ui = navbarPage("United",
theme = shinythemes::shinytheme("united"),  # <--- Specify theme here
tabPanel("Plot", "Plot tab contents..."),
navbarMenu("More",
tabPanel("Summary", "Summary tab contents..."),
tabPanel("Table", "Table tab contents...")
sidebarPanel(
textInput("txt", "Text input:", "text here"),
sliderInput("slider", "Slider input:", 1, 100, 30),
actionButton("action", "Button"),
actionButton("action2", "Button2", class = "btn-primary")
)
),
server = function(input, output) { }
)
),
server = function(input, output) { }
)
source('~/.active-rstudio-document')
shinyApp(
ui = navbarPage("United",
theme = shinythemes::shinytheme("united"),  # <--- Specify theme here
tabPanel("Plot", "Plot tab contents..."),
navbarMenu("More",
tabPanel("Summary", "Summary tab contents..."),
tabPanel("Table", "Table tab contents...")
)
),
server = function(input, output) { }
)
shinyApp(
ui = navbarPage("United",
theme = shinythemes::shinytheme("united"),  # <--- Specify theme here
tabPanel("Plot", "Plot tab contents..."),
navbarMenu("More",
tabPanel("Summary", "Summary tab contents..."),
tabPanel("Table", "Table tab contents...")
)
),
server = function(input, output) { }
)
shinyApp(
ui = navbarPage("Slate",
theme = shinythemes::shinytheme("united"),  # <--- Specify theme here
tabPanel("Plot", "Plot tab contents..."),
navbarMenu("More",
tabPanel("Summary", "Summary tab contents..."),
tabPanel("Table", "Table tab contents...")
)
),
server = function(input, output) { }
)
shinyApp(
ui = navbarPage("Slate",
theme = shinythemes::shinytheme("united"),  # <--- Specify theme here
tabPanel("Plot", "Plot tab contents..."),
navbarMenu("More",
tabPanel("Summary", "Summary tab contents..."),
tabPanel("Table", "Table tab contents...")
)
),
server = function(input, output) { }
)
shinyApp(
ui = navbarPage("slate",
theme = shinythemes::shinytheme("united"),  # <--- Specify theme here
tabPanel("Plot", "Plot tab contents..."),
navbarMenu("More",
tabPanel("Summary", "Summary tab contents..."),
tabPanel("Table", "Table tab contents...")
)
),
server = function(input, output) { }
)
runApp('Desktop/ui.R')
library(shiny)
library(dplyr)
library(shinyWidgets)
library(shinythemes)
shinyApp(
ui = navbarPage("slate",
theme = shinythemes::shinytheme("united"),  # <--- Specify theme here
tabPanel("Plot", "Plot tab contents..."),
navbarMenu("More",
tabPanel("Summary", "Summary tab contents..."),
tabPanel("Table", "Table tab contents...")
)
),
server = function(input, output) { }
)
runApp('Desktop/ui.R')
runApp('Desktop/ui.R')
library(dplyr)
library(shinyWidgets)
library(shinythemes)
shinyApp(
ui = fluidPage(
shinythemes::themeSelector(),  # <--- Add this somewhere in the UI
sidebarPanel(
textInput("txt", "Text input:", "text here"),
sliderInput("slider", "Slider input:", 1, 100, 30),
actionButton("action", "Button"),
actionButton("action2", "Button2", class = "btn-primary")
),
mainPanel(
tabsetPanel(
tabPanel("Tab 1"),
tabPanel("Tab 2")
)
)
),
server = function(input, output) {}
)
library(dplyr)
library(shinyWidgets)
library(shinythemes)
shinyApp(
ui = navbarPage("Aribnb in Seattle",
theme = shinythemes::shinytheme("slate"),  # <--- Specify theme here
tabPanel("Plot", "Plot tab contents..."),
navbarMenu("More",
tabPanel("Summary", "Summary tab contents..."),
tabPanel("Table", "Table tab contents...")
),
sidebarPanel(
textInput("txt", "Text input:", "text here"),
sliderInput("slider", "Slider input:", 1, 100, 30),
actionButton("action", "Button"),
actionButton("action2", "Button2", class = "btn-primary")
),
server = function(input, output) { }
)
)
shiny::runApp('Desktop/Info201_BB4_Final_Project/Airbnb')
setwd()
getwd()
runApp('Desktop/Info201_BB4_Final_Project/Airbnb')
shiny::runApp('Desktop/Info201_BB4_Final_Project/Airbnb')
shiny::runApp()
runApp()
shiny::runApp()
runApp('~/Desktop')
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
neighbourhood_distinct <- distinct(listings2_df, neighbourhood_group_cleansed, keep_all = FALSE)
listings2_df <- read.csv("../data/listings 2.csv", stringsAsFactors = FALSE)
neighbourhood_distinct <- distinct(listings2_df, neighbourhood_group_cleansed, keep_all = FALSE)
neighbourhood_distinct
Neighbor_distinct <- distinct(listings2_df, neighbourhood_group_cleansed, keep_all = FALSE)
runApp()
Neighbordf
Neighbordf <- filter(listings2_df, neighbourhood == input$Neighbor)
shinyUI(fluidPage(
navbarPage(inverse = F,
fluid = T,
theme = shinytheme("flatly"),
"Aribnb in Seattle",
# introduction of our app
tabPanel("Home",
tags$h1("Welcome"),
p("We are glad to see you here！At this page, we will guide you through to explore our website.
Airbnb in Seattle is your ultimate solution to find/host a Airbnb in Greater Seattle Area.
We are an independent, non-commercial set of tools and data that allows you to explore how Aribnb is reallt being used in the city.
For travelers, no matter what type of homes you are looking for, there is always a home for you.
If you are a host/potential host, feel free to check our website to see what you could expect to be a Superhost!"),
tags$h1("Getting Started"),
p("With Airbnb in Seattle, you could ask fundamental questions about Airbnb in any neighbourhood or across the city as a whole.
Quesitions such as:"),
p("- How many listings are there in my neighbourhood and where are they?"),
p("- How many hosts are running a business with multiple listings and where they?"),
p("The tools are presented simply as a interactive map, dataset with filter and text/plot analysis."),
tags$h1("Disclaimer"),
p("- This site is nor associated with or endorsed by Airbnb or any of Airbnb's competitors."),
p("- The data utilizes public information compiled online including the availibility calendar for 365 in the future,
and reviews for each listing. Data is verified, cleansed, analyzed and aggregated"),
p("- No private information is being used, including names, photographs,
listings and review details are all publicly displayed on the aribnb site"),
p("- Accuracy of the information compiled from the Aribnb site is not the responsibility of 'Airbnb in Seattle'")
),
# Seattle Map Panel
tabPanel(title = "Seattle's Map",
div(class="outer",
tags$head(
# Include custom CSS
includeCSS("style.css")
),
leafletOutput("map", width = "100%", height = "100%"),
absolutePanel(id = "controls", class = "panel panel-default", fixed = TRUE,
draggable = FALSE, top = 60, left = "auto", right = 20, bottom = "auto",
width = "auto", height = "auto",
h3("Airbnb listings explorer"),
selectInput("color", "Color", vars),
selectInput("size", "Size", vars, selected = "adultpop"),
uiOutput("neighbourhood")
)
)),
tabPanel(title = "Analysis", sidebarLayout(
sidebarPanel(
tags$h1("House Type"),
tags$h2("Apartment    35%"),
tags$h3("  House    33%"),
tags$h3("  Others    30%"),
tags$h4("Airbnb hosts can list many types of homes, most common ones are houses and apartments.
Depending on the needs of traveller, they could easily see if there are sufficient type of home which they need;
meanwhile, hosts/potential hosts are able to see the competivity of each type of home in their local market."),
selectInput("Neighbor", "Neighbourhood Group", c("All", "Central Area", "Other Neighbourhoods",
"Delridge", "Downtown", "West Seattle", "Northgate",
"Ballard", "Capitol Hill", "Beacon Hill", "Cascade", "Seward Park",
"Queen Anne", "Rainier Valley", "Mognolia", "Lake City", "University District",
"Interbay"))),
mainPanel(plotOutput("housetype"))),
sidebarLayout(
sidebarPanel(
tags$h1("Room Type"),
tags$h2("Entire Home/Apt   74%"),
tags$h3("  Private Room    23%"),
tags$h3("  Shared Room   1%"),
tags$h4("Airbnb hosts can list many different types of rooms, including entire home/apt, private room and shared room.
Depending on the needs of traveller, they could easily see if there are sufficient type of room which they need;
meanwhile, hosts/potential hosts are able to see the competivity of each type of room in their local market."),
selectInput("Neighbour", "Neighbourhood Group", c("All", "B"))),
mainPanel(plotOutput("roomtype")
))),
navbarMenu("More",
tabPanel("Contact Us"),
tabPanel("Q&A", "common questions")
)
)
)
)
Neighbordf <- filter(listings2_df, neighbourhood == input$Neighbor)
runApp()
Neighbor_distinct <- distinct(listings2_df, neighbourhood_group_cleansed, keep_all = FALSE)
Neighbor_distinct
runApp()
runApp()
Neighbor_distinct <- distinct(listings2_df, neighbourhood_group_cleansed, keep_all = FALSE)
Neighbor_distinct
runApp()
runApp()
shiny::runApp()
